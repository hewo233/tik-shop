// Code generated by hertz generator.

package product

import (
	"context"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	base "github.com/hewo/tik-shop/route/biz/model/hewo/tikshop/route/base"
	product "github.com/hewo/tik-shop/route/biz/model/hewo/tikshop/route/product"
)

// GetProducts .
// @router /api/products [GET]
func GetProducts(ctx context.Context, c *app.RequestContext) {
	var err error
	var req product.GetProductsRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new([]*base.Product)

	c.JSON(consts.StatusOK, resp)
}

// GetProduct .
// @router /api/product/:id [GET]
func GetProduct(ctx context.Context, c *app.RequestContext) {
	var err error
	var req product.GetProductRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.Product)

	c.JSON(consts.StatusOK, resp)
}

// CreateProduct .
// @router /api/products [POST]
func CreateProduct(ctx context.Context, c *app.RequestContext) {
	var err error
	var req product.CreateProductRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(product.CreateProductResponse)

	c.JSON(consts.StatusOK, resp)
}

// UpdateProduct .
// @router /api/product/:id [PUT]
func UpdateProduct(ctx context.Context, c *app.RequestContext) {
	var err error
	var req product.UpdateProductRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(product.UpdateProductResponse)

	c.JSON(consts.StatusOK, resp)
}

// DeleteProduct .
// @router /api/product/:id [DELETE]
func DeleteProduct(ctx context.Context, c *app.RequestContext) {
	var err error
	var req product.DeleteProductRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(product.DeleteProductResponse)

	c.JSON(consts.StatusOK, resp)
}
