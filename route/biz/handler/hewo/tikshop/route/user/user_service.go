// Code generated by hertz generator.

package user

import (
	"context"
	"errors"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	baserpc "github.com/hewo/tik-shop/kitex_gen/hewo/tikshop/base"
	userrpc "github.com/hewo/tik-shop/kitex_gen/hewo/tikshop/user"
	base "github.com/hewo/tik-shop/route/biz/model/hewo/tikshop/route/base"
	user "github.com/hewo/tik-shop/route/biz/model/hewo/tikshop/route/user"
	"github.com/hewo/tik-shop/route/init/rpc"
	"log"
)

// GetUser .
// @router /api/user/:id [GET]
func GetUser(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.GetUserByIDRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(user.UserResponse)

	c.JSON(consts.StatusOK, resp)
}

// UpdateUser .
// @router /api/user/:id [PUT]
func UpdateUser(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.UpdateUserRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(user.UserResponse)

	c.JSON(consts.StatusOK, resp)
}

// Register .
// @router /api/user/register [POST]
func Register(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.RegisterRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	rpcreq := userrpc.NewRegisterRequest()
	rpcreq.Username = req.Username
	rpcreq.Password = req.Password
	rpcreq.Email = req.Email
	rpcreq.Role = req.Role

	log.Println("rpcReq: ", rpcreq)

	resp, err := rpc.UserClient.Register(ctx, rpcreq)

	if err != nil {
		var errResp *baserpc.ErrorResponse
		if errors.As(err, &errResp) {
			c.String(int(errResp.Code), errResp.Message)
		}
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// UpdatePassword .
// @router /api/user/:id/password [PUT]
func UpdatePassword(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.UpdatePasswordRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.MessageResponse)

	c.JSON(consts.StatusOK, resp)
}

// Login .
// @router /api/auth/login [POST]
func Login(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.LoginRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(user.LoginResponse)

	c.JSON(consts.StatusOK, resp)
}

// AdminLogin .
// @router /api/auth/admin/login [POST]
func AdminLogin(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.LoginRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(user.LoginResponse)

	c.JSON(consts.StatusOK, resp)
}

// Verify .
// @router /api/auth/verify [GET]
func Verify(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.VerifyRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(user.VerifyResponse)

	c.JSON(consts.StatusOK, resp)
}

// GetUserByID .
// @router /api/user/:id [GET]
func GetUserByID(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.GetUserByIDRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(user.UserResponse)

	c.JSON(consts.StatusOK, resp)
}
