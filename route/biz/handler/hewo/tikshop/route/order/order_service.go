// Code generated by hertz generator.

package order

import (
	"context"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	base "github.com/hewo/tik-shop/route/biz/model/hewo/tikshop/route/base"
	order "github.com/hewo/tik-shop/route/biz/model/hewo/tikshop/route/order"
)

// GetOrders .
// @router /api/orders [GET]
func GetOrders(ctx context.Context, c *app.RequestContext) {
	var err error
	var req order.GetOrdersRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new([]*base.Order)

	c.JSON(consts.StatusOK, resp)
}

// GetOrderInfo .
// @router /api/order/:orderId [GET]
func GetOrderInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req order.GetOrderInfoRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.Order)

	c.JSON(consts.StatusOK, resp)
}

// PostOrder .
// @router /api/order [POST]
func PostOrder(ctx context.Context, c *app.RequestContext) {
	var err error
	var req order.PostOrderRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(order.PostOrderResponse)

	c.JSON(consts.StatusOK, resp)
}

// PayOrder .
// @router /api/order/:orderId/pay [POST]
func PayOrder(ctx context.Context, c *app.RequestContext) {
	var err error
	var req order.PayOrderRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.MessageResponse)

	c.JSON(consts.StatusOK, resp)
}

// CancelOrder .
// @router /api/orders/:orderId/cancel [POST]
func CancelOrder(ctx context.Context, c *app.RequestContext) {
	var err error
	var req order.CancelOrderRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.MessageResponse)

	c.JSON(consts.StatusOK, resp)
}
